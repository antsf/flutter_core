/// Provides a Dio interceptor for logging HTTP request and response details.
///
/// This library contains [DioInterceptor], which can be added to a Dio instance
/// to automatically log information about outgoing requests, successful responses,
/// and errors.
library dio_logging_interceptor; // Changed library name for clarity

import 'package:dio/dio.dart';
import 'package:logger/logger.dart'; // Assuming 'logger' package is used

/// A [Dio] interceptor that logs HTTP requests, responses, and errors.
///
/// This interceptor can be useful for debugging network interactions during development.
/// It uses an instance of [Logger] (from the `logger` package or a similar one)
/// to output log messages. Logging can be enabled or disabled via the [enableLogging] flag.
///
/// ### Usage:
/// ```dart
/// final dio = Dio();
/// final logger = Logger(); // Your logger instance
///
/// dio.interceptors.add(DioLoggingInterceptor( // Renamed for clarity from original DioInterceptor
///   logger: logger,
///   enableLogging: true, // Default is true
/// ));
/// ```
class DioLoggingInterceptor extends Interceptor { // Renamed class for clarity
  /// The [Logger] instance used for outputting log messages.
  /// If null, no logging will occur even if [enableLogging] is true.
  final Logger? logger;

  /// A flag to enable or disable logging.
  /// Defaults to `true`. If `false`, no logs will be generated by this interceptor.
  final bool enableLogging;

  /// Creates a [DioLoggingInterceptor].
  ///
  /// - [logger]: The [Logger] instance to use.
  /// - [enableLogging]: Whether logging is enabled. Defaults to `true`.
  DioLoggingInterceptor({
    this.logger,
    this.enableLogging = true,
  });

  /// Called when a request is about to be sent.
  ///
  /// Logs the request method, URI, headers, and data if logging is enabled.
  @override
  void onRequest(RequestOptions options, RequestInterceptorHandler handler) {
    if (enableLogging && logger != null) {
      final logMessage = StringBuffer();
      logMessage.writeln('--- Dio Request ---');
      logMessage.writeln('Method: ${options.method}');
      logMessage.writeln('URI: ${options.uri}');
      if (options.headers.isNotEmpty) {
        logMessage.writeln('Headers:');
        options.headers.forEach((key, value) => logMessage.writeln('  $key: $value'));
      }
      if (options.data != null) {
        logMessage.writeln('Data: ${options.data.toString().length > 200 ? options.data.toString().substring(0,200) + "..." : options.data}');
      }
      logMessage.write('-------------------');
      logger!.i(logMessage.toString());
    }
    super.onRequest(options, handler); // Ensure to call super or handler.next()
  }

  /// Called when a response is received.
  ///
  /// Logs the response status code, status message, and data if logging is enabled.
  @override
  void onResponse(Response response, ResponseInterceptorHandler handler) {
    if (enableLogging && logger != null) {
      final logMessage = StringBuffer();
      logMessage.writeln('--- Dio Response ---');
      logMessage.writeln('URI: ${response.requestOptions.uri}');
      logMessage.writeln('Status Code: ${response.statusCode}');
      logMessage.writeln('Status Message: ${response.statusMessage}');
      if (response.data != null) {
         logMessage.writeln('Data: ${response.data.toString().length > 200 ? response.data.toString().substring(0,200) + "..." : response.data}');
      }
      logMessage.write('--------------------');
      logger!.i(logMessage.toString());
    }
    super.onResponse(response, handler); // Ensure to call super or handler.next()
  }

  /// Called when an error occurs during a request or response.
  ///
  /// Logs the error type, message, and response details (if available) if logging is enabled.
  @override
  void onError(DioException err, ErrorInterceptorHandler handler) {
    if (enableLogging && logger != null) {
      final logMessage = StringBuffer();
      logMessage.writeln('--- Dio Error ---');
      logMessage.writeln('URI: ${err.requestOptions.uri}');
      logMessage.writeln('Error Type: ${err.type}');
      logMessage.writeln('Message: ${err.message}');
      if (err.response != null) {
        logMessage.writeln('Status Code: ${err.response!.statusCode}');
        logMessage.writeln('Status Message: ${err.response!.statusMessage}');
        if (err.response!.data != null) {
          logMessage.writeln('Response Data: ${err.response!.data.toString().length > 200 ? err.response!.data.toString().substring(0,200) + "..." : err.response!.data}');
        }
      }
      logMessage.write('-----------------');
      logger!.e(logMessage.toString(), error: err.error, stackTrace: err.stackTrace);
    }
    super.onError(err, handler); // Ensure to call super or handler.next()
  }
}
